@page

@using ViewModels;
@model FUNewsManagement.Pages.News.DetailsModel
@{
    ViewData["Title"] = "Details";
    var listComment = ViewData["ListComment"] as List<CommentVM>;
    var accountId = Convert.ToInt32(ViewData["AccountID"]);
    var accountName = Convert.ToString(ViewData["AccountName"]);
}

<h2>News Details</h2>

<div style="margin-top: 20px">

    <h4>@Model.DetailVM.NewsTitle</h4>
    <hr />

    <table>
        <tr>
            <th class="col-sm-2">HeadLine :</th>
            <td>@Model.DetailVM.Headline</td>
        </tr>
        <tr>
            <th class="col-sm-2">Created Date :</th>
            <td>@Model.DetailVM.CreatedDate?.ToString("dd/MM/yyyy") </td>
        </tr>
        <tr>
            <th class="col-sm-2">Modified Date :</th>
            <td>@Model.DetailVM.ModifiedDate?.ToString("dd/MM/yyyy")</td>
        </tr>
        <tr>
            <th class="col-sm-2">News Content :</th>
            <td>@Model.DetailVM.NewsContent</td>
        </tr>
        <tr>
            <th class="col-sm-2">News Source :</th>
            <td>@Model.DetailVM.NewsSource</td>
        </tr>
        <tr>
            <th class="col-sm-2">Tags :</th>
            <td>
                @(Model.DetailVM.Tags.Any() == true ? string.Join(", ", Model.DetailVM.Tags.Select(t => t.TagName)) : "N/A")
            </td>
        </tr>
        <tr>
            <th class="col-sm-2">Category :</th>
            <td>@Model.DetailVM.Category.CategoryName</td>
        </tr>
        <tr>
            <th class="col-sm-2">Created By :</h>
            <td>@Model.DetailVM.CreatedBy.AccountName</td>
        </tr>
    </table>
</div>


<div style="margin-top: 50px; margin-bottom: 20px">
    <h4>Comment</h4>
    <hr />
    @if (accountId != 0)
    {
        <div class="row justify-content-center align-content-center w-100 m-auto">
            <div class="col-md-12 col-sm-10">
                <input type="hidden" id="newsArticleId" value="@Model.DetailVM.NewsArticleId" />
                <input type="hidden" id="currentAccountId" value="@accountId" />
                <input type="hidden" id="currentAccountName" value="@accountName" />
                <div class="row mb-2">
                    <textarea id="commentContent" class="form-control" rows="4"></textarea>
                </div>
                <div class="row justify-content-end">
                    <div class="col-md-2 text-end px-0">
                        <button id="saveCommentBtn" class="btn btn-primary">Save Comment</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<div class="row justify-content-center align-content-center">
    <div id="commentsList" class="col-md-12 col-sm-10">
        @if (listComment != null && listComment.Any())
        {
            @foreach (var comment in listComment)
            {
                <div class="comment-item row justify-content-between my-2" data-comment-id="@comment.CommentID">
                    <div class="col-md-2">
                        <strong>@comment.AccountName :</strong>
                    </div>
                    <div class="col-md-8">
                        <input type="text" value="@comment.Content" class="form-control comment-content" disabled />
                    </div>
                    <div class="col-md-2 text-end">
                        @if (accountId == comment.AccountID)
                        {
                            <button class="btn btn-success edit-comment-btn">Edit</button>
                            <button class="btn btn-danger delete-comment-btn">Delete</button>
                            <button class="btn btn-primary save-edit-btn" style="display:none">Save</button>
                            <button class="btn btn-secondary cancel-edit-btn" style="display:none">Cancel</button>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>
<div style="margin-top: 20px">
    @if (ViewBag.Role == "Staff")
    {
        <a asp-page="/News/Edit" asp-route-id="@Model?.DetailVM.NewsArticleId">Edit</a> <span> | </span>
        <a asp-page="/News/List">Back to List</a>
    }
    else
    {
        <a asp-page="/Home/Index">Back to List</a>
    }
</div>

@section Scripts {
    <script src="~/js/microsoft/signalr/signalr.js"></script>
    <script>
        $(document).ready(function () {
            attachEventHandlers();
        });

        var connection = new signalR.HubConnectionBuilder().withUrl("/commentHub").build();

        connection.start().catch(function (err) {
            console.error(err.toString());
        });

        connection.on("ReceiveComment", function (comment) {
            if (comment.newsArticleID === $("#newsArticleId").val()) {
                const commentHtml = createCommentElement(comment);
                $("#commentsList").append(commentHtml);
                attachEventHandlers();
            }
        });

        connection.on("CommentEdited", function (commentId, content) {
            const commentItem = $(`.comment-item[data-comment-id="${commentId}"]`);
            commentItem.find(".comment-content").val(content);
        })

        connection.on("CommentDeleted", function (commentId) {
            $(`.comment-item[data-comment-id="${commentId}"]`).remove();
        })

        $("#saveCommentBtn").on("click", function (e) {
            var content = $("#commentContent").val();
            if (!content || content.trim() === '') {
                alert("Please enter a comment");
                return false;
            }

            var newsArticleId = $("#newsArticleId").val();
            var accountId = $("#currentAccountId").val();
            var accountName = $("#currentAccountName").val();

            $.ajax({
                url: "/Comment/Create",
                type: "post",
                data: {
                    commentVM: {
                        Content: content,
                        NewsArticleID: newsArticleId,
                        AccountID: parseInt(accountId),
                        AccountName: accountName
                    }
                },
                success: function (response) {
                    $("#commentContent").val("");
                },
                error: function (xhr, status, error) {
                    console.error("Error creating comment:", xhr.responseText);
                    alert("Error creating comment: " + xhr.responseText);
                }
            });
        });

        function attachEventHandlers() {
            $(document).off("click", ".edit-comment-btn");
            $(document).off("click", ".cancel-edit-btn");
            $(document).off("click", ".save-edit-btn");
            $(document).off("click", ".delete-comment-btn");

            $(".edit-comment-btn").on("click", function () {
                const commentItem = $(this).closest(".comment-item");
                const contentInput = commentItem.find(".comment-content");

                contentInput.data("original-value", contentInput.val());

                contentInput.prop("disabled", false);
                contentInput.focus();

                commentItem.find(".edit-comment-btn, .delete-comment-btn").hide();
                commentItem.find(".save-edit-btn, .cancel-edit-btn").show();
            });

            $(".cancel-edit-btn").on("click", function () {
                const commentItem = $(this).closest(".comment-item");
                const contentInput = commentItem.find(".comment-content");

                contentInput.val(contentInput.data("original-value"));
                contentInput.prop("disabled", true);

                commentItem.find(".edit-comment-btn, .delete-comment-btn").show();
                commentItem.find(".save-edit-btn, .cancel-edit-btn").hide();
            });

            $(".save-edit-btn").on("click", function () {
                const commentItem = $(this).closest(".comment-item");
                const commentId = commentItem.data("comment-id");
                const content = commentItem.find(".comment-content").val();

                $.ajax({
                    url: "/Comment/Edit",
                    type: "POST",
                    data: {
                        CommentId: commentId,
                        Content: content
                    },
                    success: function () {
                        commentItem.find(".comment-content").prop("disabled", true);
                        commentItem.find(".edit-comment-btn, .delete-comment-btn").show();
                        commentItem.find(".save-edit-btn, .cancel-edit-btn").hide();
                    },
                    error: function (err) {
                        console.error("Error updating comment:", err);
                        alert("Error updating comment");
                    }
                });
            });

            $(".delete-comment-btn").on("click", function () {
                const commentItem = $(this).closest(".comment-item");
                const commentId = commentItem.data("comment-id");

                $.ajax({
                    url: "/Comment/Delete",
                    type: "POST",
                    data: {
                        CommentId: commentId
                    },
                    success: function () {
                    },
                    error: function (err) {
                        console.error("Error deleting comment:", err);
                        alert("Error deleting comment");
                    }
                });
            });
        }

        function createCommentElement(comment) {
            const currentAccountId = $("#currentAccountId").val();
            const isMyComment = (currentAccountId == comment.accountID);
            let actionsHtml = '';
            if (isMyComment) {
                actionsHtml = `
                                <button class="btn btn-success edit-comment-btn">Edit</button>
                                <button class="btn btn-danger delete-comment-btn">Delete</button>
                                <button class="btn btn-primary save-edit-btn" style="display:none">Save</button>
                                <button class="btn btn-secondary cancel-edit-btn" style="display:none">Cancel</button>
                            `;
            }

            return `
                    <div class="comment-item row justify-content-between my-2" data-comment-id="${comment.commentID}">
                        <div class="col-md-2">
                            <strong>${comment.accountName} :</strong>
                        </div>
                        <div class="col-md-8">
                            <input type="text" value="${comment.content}" class="form-control comment-content" disabled />
                        </div>
                        <div class="col-md-2 text-end">
                            ${actionsHtml}
                        </div>
                    </div>
                `;
        }
    </script>
}
